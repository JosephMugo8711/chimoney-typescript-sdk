import t from"dotenv";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)({}).hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},e.apply(null,arguments)}t.config();class a{constructor(t){this.apiKey=void 0,this.baseUrl=void 0;const{apikey:e,baseUrl:a}=t;if(!e&&!process.env.API_KEY)throw new Error("API key must be provided either in config or environment variables.");this.apiKey=e||process.env.API_KEY,this.baseUrl=a||process.env.BASE_URL||""}getBaseUrl(){if(!this.baseUrl)throw new Error("Base URL is not defined. Please provide a valid base URL.");return this.baseUrl}getApiKey(){return this.apiKey}async apiRequest(t,a={}){try{const r=await fetch(`${this.getBaseUrl()}/${t}`,e({},a,{headers:e({},a.headers,{Authorization:`Bearer ${this.getApiKey()}`,"Content-Type":"application/json"})}));if(!r.ok){const t=await r.text();throw new Error(`API request failed: ${r.statusText} - ${t}`)}return await r.json()}catch(t){throw console.error("API Request Error:",t),t}}async post(t,e){return await this.apiRequest(t,{method:"POST",body:JSON.stringify(e)})}async get(t){return await this.apiRequest(t,{method:"GET"})}}const r="payments";class s extends a{}var o;o=s,[class extends a{async createChimoneyPayout(t){return await this.paymentPost(`${r}/chimoney-payout`,t)}paymentPost(t,e){return this.apiRequest(t,{method:"POST",body:JSON.stringify(e)})}async createMobileMoneyPayout(t){return await this.paymentPost(`${r}/mobile-money-payout`,t)}async createAirtimePayout(t){return await this.paymentPost(`${r}/airtime-payout`,t)}async createBankPayout(t){return await this.paymentPost(`${r}/bank-payout`,t)}async createGiftCardPayout(t){return await this.paymentPost(`${r}/giftcard-payout`,t)}async createXRPLPayout(t){return await this.paymentPost(`${r}/xrpl-payout`,t)}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{o.prototype[e]=t.prototype[e]})});export{s as default};
